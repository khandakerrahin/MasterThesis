% book
% Required fields: author or editor, title, publisher, year. 
% Optional fields: volume or number, series, address, edition, month, note.

% article
% Required fields: author, title, journal, year. 
% Optional fields: volume, number, pages, month, note.

% conference
% same as inproceedings
% Required fields: author, title, booktitle, year. 
% Optional fields: editor, volume or number, series, pages, address, month, organization, publisher, note

% website
% as misc
% Required fields: none. 
% Optional fields: author, title, howpublished, month, year, note.


% 1. TOGA

@inproceedings{gabriel_ryan_toga_2022,
	title = {{TOGA}: A Neural Method for Test Oracle Generation},
	volume = {2022-May},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85133519784&doi=10.1145%2f3510003.3510141&partnerID=40&md5=6cc5007a3c7ed9be6a7c35556b9baa1f},
	doi = {10.1145/3510003.3510141},
	abstract = {Testing is widely recognized as an important stage of the software development lifecycle. Effective software testing can provide benefits such as bug finding, preventing regressions, and documentation. In terms of documentation, unit tests express a unit's intended functionality, as conceived by the developer. A test oracle, typically expressed as an condition, documents the intended behavior of a unit under a given test prefix. Synthesizing a functional test oracle is a challenging problem, as it must capture the intended functionality rather than the implemented functionality. In this paper, we propose {TOGA} (a neural method for Test Oracle {GenerAtion}), a unified transformer-based neural approach to infer both exceptional and assertion test oracles based on the context of the focal method. Our approach can handle units with ambiguous or missing documentation, and even units with a missing implementation. We evaluate our approach on both oracle inference accuracy and functional bug-finding. Our technique improves accuracy by 33\% over existing oracle inference approaches, achieving 96\% over-all accuracy on a held out test dataset. Furthermore, we show that when integrated with a automated test generation tool ({EvoSuite}), our approach finds 57 real world bugs in large-scale Java programs, including 30 bugs that are not found by any other automated testing method in our evaluation. Â© 2022 {ACM}.},
	pages = {2130 -- 2141},
	booktitle = {Proceedings - International Conference on Software Engineering},
	author = {{Gabriel Ryan} and {Todd Mytkowicz} and {Shuvendu K. Lahiri} and {Elizabeth Dinella}},
	date = {2022},
	note = {Type: Conference paper},
	keywords = {Language model, Software testing, Learning systems, Machine learning, Machine-learning, Software design, Program debugging, Statistical tests, Software testings, Electric transformer testing, Bug finding, Condition, Functional test, Life cycle, Software development life-cycle, Test oracles, Transformer, Unit tests},
	annotation = {Cited by: 2; All Open Access, Green Open Access},
	file = {Submitted Version:/home/shaker/Zotero/storage/525P4QRC/Dinella et al. - 2022 - TOGA A Neural Method for Test Oracle Generation.pdf:application/pdf},
}